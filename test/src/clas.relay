def @main(%x: Tensor[(1, 3, 224, 224), float32] /* ty=Tensor[(1, 3, 224, 224), float32] */) -> Tensor[(1, 1000), float32] {
  %0 = nn.conv2d(%x, meta[relay.Constant][0] /* ty=Tensor[(16, 3, 3, 3), float32] */, strides=[2, 2], padding=[1, 1, 1, 1], channels=16, kernel_size=[3, 3]) /* ty=Tensor[(1, 16, 112, 112), float32] */;
  %1 = nn.batch_norm(%0, meta[relay.Constant][1] /* ty=Tensor[(16), float32] */, meta[relay.Constant][2] /* ty=Tensor[(16), float32] */, meta[relay.Constant][3] /* ty=Tensor[(16), float32] */, meta[relay.Constant][4] /* ty=Tensor[(16), float32] */) /* ty=(Tensor[(1, 16, 112, 112), float32], Tensor[(16), float32], Tensor[(16), float32]) */;
  %2 = %1.0 /* ty=Tensor[(1, 16, 112, 112), float32] */;
  %3 = clip(%2, a_min=-3f, a_max=3f) /* ty=Tensor[(1, 16, 112, 112), float32] */;
  %4 = divide(%3, 6f /* ty=float32 */) /* ty=Tensor[(1, 16, 112, 112), float32] */;
  %5 = add(%4, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 16, 112, 112), float32] */;
  %6 = multiply(%2, %5) /* ty=Tensor[(1, 16, 112, 112), float32] */;
  %7 = nn.conv2d(%6, meta[relay.Constant][5] /* ty=Tensor[(16, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=16, channels=16, kernel_size=[3, 3]) /* ty=Tensor[(1, 16, 112, 112), float32] */;
  %8 = nn.batch_norm(%7, meta[relay.Constant][6] /* ty=Tensor[(16), float32] */, meta[relay.Constant][7] /* ty=Tensor[(16), float32] */, meta[relay.Constant][8] /* ty=Tensor[(16), float32] */, meta[relay.Constant][9] /* ty=Tensor[(16), float32] */) /* ty=(Tensor[(1, 16, 112, 112), float32], Tensor[(16), float32], Tensor[(16), float32]) */;
  %9 = %8.0 /* ty=Tensor[(1, 16, 112, 112), float32] */;
  %10 = clip(%9, a_min=-3f, a_max=3f) /* ty=Tensor[(1, 16, 112, 112), float32] */;
  %11 = divide(%10, 6f /* ty=float32 */) /* ty=Tensor[(1, 16, 112, 112), float32] */;
  %12 = add(%11, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 16, 112, 112), float32] */;
  %13 = multiply(%9, %12) /* ty=Tensor[(1, 16, 112, 112), float32] */;
  %14 = nn.conv2d(%13, meta[relay.Constant][10] /* ty=Tensor[(24, 16, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=24, kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 112, 112), float32] */;
  %15 = nn.batch_norm(%14, meta[relay.Constant][11] /* ty=Tensor[(24), float32] */, meta[relay.Constant][12] /* ty=Tensor[(24), float32] */, meta[relay.Constant][13] /* ty=Tensor[(24), float32] */, meta[relay.Constant][14] /* ty=Tensor[(24), float32] */) /* ty=(Tensor[(1, 24, 112, 112), float32], Tensor[(24), float32], Tensor[(24), float32]) */;
  %16 = %15.0 /* ty=Tensor[(1, 24, 112, 112), float32] */;
  %17 = clip(%16, a_min=-3f, a_max=3f) /* ty=Tensor[(1, 24, 112, 112), float32] */;
  %18 = divide(%17, 6f /* ty=float32 */) /* ty=Tensor[(1, 24, 112, 112), float32] */;
  %19 = add(%18, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 24, 112, 112), float32] */;
  %20 = multiply(%16, %19) /* ty=Tensor[(1, 24, 112, 112), float32] */;
  %21 = nn.conv2d(%20, meta[relay.Constant][15] /* ty=Tensor[(24, 1, 3, 3), float32] */, strides=[2, 2], padding=[1, 1, 1, 1], groups=24, channels=24, kernel_size=[3, 3]) /* ty=Tensor[(1, 24, 56, 56), float32] */;
  %22 = nn.batch_norm(%21, meta[relay.Constant][16] /* ty=Tensor[(24), float32] */, meta[relay.Constant][17] /* ty=Tensor[(24), float32] */, meta[relay.Constant][18] /* ty=Tensor[(24), float32] */, meta[relay.Constant][19] /* ty=Tensor[(24), float32] */) /* ty=(Tensor[(1, 24, 56, 56), float32], Tensor[(24), float32], Tensor[(24), float32]) */;
  %23 = %22.0 /* ty=Tensor[(1, 24, 56, 56), float32] */;
  %24 = clip(%23, a_min=-3f, a_max=3f) /* ty=Tensor[(1, 24, 56, 56), float32] */;
  %25 = divide(%24, 6f /* ty=float32 */) /* ty=Tensor[(1, 24, 56, 56), float32] */;
  %26 = add(%25, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 24, 56, 56), float32] */;
  %27 = multiply(%23, %26) /* ty=Tensor[(1, 24, 56, 56), float32] */;
  %28 = nn.conv2d(%27, meta[relay.Constant][20] /* ty=Tensor[(48, 24, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=48, kernel_size=[1, 1]) /* ty=Tensor[(1, 48, 56, 56), float32] */;
  %29 = nn.batch_norm(%28, meta[relay.Constant][21] /* ty=Tensor[(48), float32] */, meta[relay.Constant][22] /* ty=Tensor[(48), float32] */, meta[relay.Constant][23] /* ty=Tensor[(48), float32] */, meta[relay.Constant][24] /* ty=Tensor[(48), float32] */) /* ty=(Tensor[(1, 48, 56, 56), float32], Tensor[(48), float32], Tensor[(48), float32]) */;
  %30 = %29.0 /* ty=Tensor[(1, 48, 56, 56), float32] */;
  %31 = clip(%30, a_min=-3f, a_max=3f) /* ty=Tensor[(1, 48, 56, 56), float32] */;
  %32 = divide(%31, 6f /* ty=float32 */) /* ty=Tensor[(1, 48, 56, 56), float32] */;
  %33 = add(%32, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 48, 56, 56), float32] */;
  %34 = multiply(%30, %33) /* ty=Tensor[(1, 48, 56, 56), float32] */;
  %35 = nn.conv2d(%34, meta[relay.Constant][25] /* ty=Tensor[(48, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=48, channels=48, kernel_size=[3, 3]) /* ty=Tensor[(1, 48, 56, 56), float32] */;
  %36 = nn.batch_norm(%35, meta[relay.Constant][26] /* ty=Tensor[(48), float32] */, meta[relay.Constant][27] /* ty=Tensor[(48), float32] */, meta[relay.Constant][28] /* ty=Tensor[(48), float32] */, meta[relay.Constant][29] /* ty=Tensor[(48), float32] */) /* ty=(Tensor[(1, 48, 56, 56), float32], Tensor[(48), float32], Tensor[(48), float32]) */;
  %37 = %36.0 /* ty=Tensor[(1, 48, 56, 56), float32] */;
  %38 = clip(%37, a_min=-3f, a_max=3f) /* ty=Tensor[(1, 48, 56, 56), float32] */;
  %39 = divide(%38, 6f /* ty=float32 */) /* ty=Tensor[(1, 48, 56, 56), float32] */;
  %40 = add(%39, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 48, 56, 56), float32] */;
  %41 = multiply(%37, %40) /* ty=Tensor[(1, 48, 56, 56), float32] */;
  %42 = nn.conv2d(%41, meta[relay.Constant][30] /* ty=Tensor[(48, 48, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=48, kernel_size=[1, 1]) /* ty=Tensor[(1, 48, 56, 56), float32] */;
  %43 = nn.batch_norm(%42, meta[relay.Constant][31] /* ty=Tensor[(48), float32] */, meta[relay.Constant][32] /* ty=Tensor[(48), float32] */, meta[relay.Constant][33] /* ty=Tensor[(48), float32] */, meta[relay.Constant][34] /* ty=Tensor[(48), float32] */) /* ty=(Tensor[(1, 48, 56, 56), float32], Tensor[(48), float32], Tensor[(48), float32]) */;
  %44 = %43.0 /* ty=Tensor[(1, 48, 56, 56), float32] */;
  %45 = clip(%44, a_min=-3f, a_max=3f) /* ty=Tensor[(1, 48, 56, 56), float32] */;
  %46 = divide(%45, 6f /* ty=float32 */) /* ty=Tensor[(1, 48, 56, 56), float32] */;
  %47 = add(%46, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 48, 56, 56), float32] */;
  %48 = multiply(%44, %47) /* ty=Tensor[(1, 48, 56, 56), float32] */;
  %49 = nn.conv2d(%48, meta[relay.Constant][35] /* ty=Tensor[(48, 1, 3, 3), float32] */, strides=[2, 2], padding=[1, 1, 1, 1], groups=48, channels=48, kernel_size=[3, 3]) /* ty=Tensor[(1, 48, 28, 28), float32] */;
  %50 = nn.batch_norm(%49, meta[relay.Constant][36] /* ty=Tensor[(48), float32] */, meta[relay.Constant][37] /* ty=Tensor[(48), float32] */, meta[relay.Constant][38] /* ty=Tensor[(48), float32] */, meta[relay.Constant][39] /* ty=Tensor[(48), float32] */) /* ty=(Tensor[(1, 48, 28, 28), float32], Tensor[(48), float32], Tensor[(48), float32]) */;
  %51 = %50.0 /* ty=Tensor[(1, 48, 28, 28), float32] */;
  %52 = clip(%51, a_min=-3f, a_max=3f) /* ty=Tensor[(1, 48, 28, 28), float32] */;
  %53 = divide(%52, 6f /* ty=float32 */) /* ty=Tensor[(1, 48, 28, 28), float32] */;
  %54 = add(%53, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 48, 28, 28), float32] */;
  %55 = multiply(%51, %54) /* ty=Tensor[(1, 48, 28, 28), float32] */;
  %56 = nn.conv2d(%55, meta[relay.Constant][40] /* ty=Tensor[(96, 48, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 28, 28), float32] */;
  %57 = nn.batch_norm(%56, meta[relay.Constant][41] /* ty=Tensor[(96), float32] */, meta[relay.Constant][42] /* ty=Tensor[(96), float32] */, meta[relay.Constant][43] /* ty=Tensor[(96), float32] */, meta[relay.Constant][44] /* ty=Tensor[(96), float32] */) /* ty=(Tensor[(1, 96, 28, 28), float32], Tensor[(96), float32], Tensor[(96), float32]) */;
  %58 = %57.0 /* ty=Tensor[(1, 96, 28, 28), float32] */;
  %59 = clip(%58, a_min=-3f, a_max=3f) /* ty=Tensor[(1, 96, 28, 28), float32] */;
  %60 = divide(%59, 6f /* ty=float32 */) /* ty=Tensor[(1, 96, 28, 28), float32] */;
  %61 = add(%60, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 96, 28, 28), float32] */;
  %62 = multiply(%58, %61) /* ty=Tensor[(1, 96, 28, 28), float32] */;
  %63 = nn.conv2d(%62, meta[relay.Constant][45] /* ty=Tensor[(96, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=96, channels=96, kernel_size=[3, 3]) /* ty=Tensor[(1, 96, 28, 28), float32] */;
  %64 = nn.batch_norm(%63, meta[relay.Constant][46] /* ty=Tensor[(96), float32] */, meta[relay.Constant][47] /* ty=Tensor[(96), float32] */, meta[relay.Constant][48] /* ty=Tensor[(96), float32] */, meta[relay.Constant][49] /* ty=Tensor[(96), float32] */) /* ty=(Tensor[(1, 96, 28, 28), float32], Tensor[(96), float32], Tensor[(96), float32]) */;
  %65 = %64.0 /* ty=Tensor[(1, 96, 28, 28), float32] */;
  %66 = clip(%65, a_min=-3f, a_max=3f) /* ty=Tensor[(1, 96, 28, 28), float32] */;
  %67 = divide(%66, 6f /* ty=float32 */) /* ty=Tensor[(1, 96, 28, 28), float32] */;
  %68 = add(%67, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 96, 28, 28), float32] */;
  %69 = multiply(%65, %68) /* ty=Tensor[(1, 96, 28, 28), float32] */;
  %70 = nn.conv2d(%69, meta[relay.Constant][50] /* ty=Tensor[(96, 96, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 28, 28), float32] */;
  %71 = nn.batch_norm(%70, meta[relay.Constant][51] /* ty=Tensor[(96), float32] */, meta[relay.Constant][52] /* ty=Tensor[(96), float32] */, meta[relay.Constant][53] /* ty=Tensor[(96), float32] */, meta[relay.Constant][54] /* ty=Tensor[(96), float32] */) /* ty=(Tensor[(1, 96, 28, 28), float32], Tensor[(96), float32], Tensor[(96), float32]) */;
  %72 = %71.0 /* ty=Tensor[(1, 96, 28, 28), float32] */;
  %73 = clip(%72, a_min=-3f, a_max=3f) /* ty=Tensor[(1, 96, 28, 28), float32] */;
  %74 = divide(%73, 6f /* ty=float32 */) /* ty=Tensor[(1, 96, 28, 28), float32] */;
  %75 = add(%74, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 96, 28, 28), float32] */;
  %76 = multiply(%72, %75) /* ty=Tensor[(1, 96, 28, 28), float32] */;
  %77 = nn.conv2d(%76, meta[relay.Constant][55] /* ty=Tensor[(96, 1, 3, 3), float32] */, strides=[2, 2], padding=[1, 1, 1, 1], groups=96, channels=96, kernel_size=[3, 3]) /* ty=Tensor[(1, 96, 14, 14), float32] */;
  %78 = nn.batch_norm(%77, meta[relay.Constant][56] /* ty=Tensor[(96), float32] */, meta[relay.Constant][57] /* ty=Tensor[(96), float32] */, meta[relay.Constant][58] /* ty=Tensor[(96), float32] */, meta[relay.Constant][59] /* ty=Tensor[(96), float32] */) /* ty=(Tensor[(1, 96, 14, 14), float32], Tensor[(96), float32], Tensor[(96), float32]) */;
  %79 = %78.0 /* ty=Tensor[(1, 96, 14, 14), float32] */;
  %80 = clip(%79, a_min=-3f, a_max=3f) /* ty=Tensor[(1, 96, 14, 14), float32] */;
  %81 = divide(%80, 6f /* ty=float32 */) /* ty=Tensor[(1, 96, 14, 14), float32] */;
  %82 = add(%81, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 96, 14, 14), float32] */;
  %83 = multiply(%79, %82) /* ty=Tensor[(1, 96, 14, 14), float32] */;
  %84 = nn.conv2d(%83, meta[relay.Constant][60] /* ty=Tensor[(192, 96, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %85 = nn.batch_norm(%84, meta[relay.Constant][61] /* ty=Tensor[(192), float32] */, meta[relay.Constant][62] /* ty=Tensor[(192), float32] */, meta[relay.Constant][63] /* ty=Tensor[(192), float32] */, meta[relay.Constant][64] /* ty=Tensor[(192), float32] */) /* ty=(Tensor[(1, 192, 14, 14), float32], Tensor[(192), float32], Tensor[(192), float32]) */;
  %86 = %85.0 /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %87 = clip(%86, a_min=-3f, a_max=3f) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %88 = divide(%87, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %89 = add(%88, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %90 = multiply(%86, %89) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %91 = nn.conv2d(%90, meta[relay.Constant][65] /* ty=Tensor[(192, 1, 5, 5), float32] */, padding=[2, 2, 2, 2], groups=192, channels=192, kernel_size=[5, 5]) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %92 = nn.batch_norm(%91, meta[relay.Constant][66] /* ty=Tensor[(192), float32] */, meta[relay.Constant][67] /* ty=Tensor[(192), float32] */, meta[relay.Constant][68] /* ty=Tensor[(192), float32] */, meta[relay.Constant][69] /* ty=Tensor[(192), float32] */) /* ty=(Tensor[(1, 192, 14, 14), float32], Tensor[(192), float32], Tensor[(192), float32]) */;
  %93 = %92.0 /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %94 = clip(%93, a_min=-3f, a_max=3f) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %95 = divide(%94, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %96 = add(%95, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %97 = multiply(%93, %96) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %98 = nn.conv2d(%97, meta[relay.Constant][70] /* ty=Tensor[(192, 192, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %99 = nn.batch_norm(%98, meta[relay.Constant][71] /* ty=Tensor[(192), float32] */, meta[relay.Constant][72] /* ty=Tensor[(192), float32] */, meta[relay.Constant][73] /* ty=Tensor[(192), float32] */, meta[relay.Constant][74] /* ty=Tensor[(192), float32] */) /* ty=(Tensor[(1, 192, 14, 14), float32], Tensor[(192), float32], Tensor[(192), float32]) */;
  %100 = %99.0 /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %101 = clip(%100, a_min=-3f, a_max=3f) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %102 = divide(%101, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %103 = add(%102, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %104 = multiply(%100, %103) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %105 = nn.conv2d(%104, meta[relay.Constant][75] /* ty=Tensor[(192, 1, 5, 5), float32] */, padding=[2, 2, 2, 2], groups=192, channels=192, kernel_size=[5, 5]) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %106 = nn.batch_norm(%105, meta[relay.Constant][76] /* ty=Tensor[(192), float32] */, meta[relay.Constant][77] /* ty=Tensor[(192), float32] */, meta[relay.Constant][78] /* ty=Tensor[(192), float32] */, meta[relay.Constant][79] /* ty=Tensor[(192), float32] */) /* ty=(Tensor[(1, 192, 14, 14), float32], Tensor[(192), float32], Tensor[(192), float32]) */;
  %107 = %106.0 /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %108 = clip(%107, a_min=-3f, a_max=3f) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %109 = divide(%108, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %110 = add(%109, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %111 = multiply(%107, %110) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %112 = nn.conv2d(%111, meta[relay.Constant][80] /* ty=Tensor[(192, 192, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %113 = nn.batch_norm(%112, meta[relay.Constant][81] /* ty=Tensor[(192), float32] */, meta[relay.Constant][82] /* ty=Tensor[(192), float32] */, meta[relay.Constant][83] /* ty=Tensor[(192), float32] */, meta[relay.Constant][84] /* ty=Tensor[(192), float32] */) /* ty=(Tensor[(1, 192, 14, 14), float32], Tensor[(192), float32], Tensor[(192), float32]) */;
  %114 = %113.0 /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %115 = clip(%114, a_min=-3f, a_max=3f) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %116 = divide(%115, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %117 = add(%116, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %118 = multiply(%114, %117) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %119 = nn.conv2d(%118, meta[relay.Constant][85] /* ty=Tensor[(192, 1, 5, 5), float32] */, padding=[2, 2, 2, 2], groups=192, channels=192, kernel_size=[5, 5]) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %120 = nn.batch_norm(%119, meta[relay.Constant][86] /* ty=Tensor[(192), float32] */, meta[relay.Constant][87] /* ty=Tensor[(192), float32] */, meta[relay.Constant][88] /* ty=Tensor[(192), float32] */, meta[relay.Constant][89] /* ty=Tensor[(192), float32] */) /* ty=(Tensor[(1, 192, 14, 14), float32], Tensor[(192), float32], Tensor[(192), float32]) */;
  %121 = %120.0 /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %122 = clip(%121, a_min=-3f, a_max=3f) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %123 = divide(%122, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %124 = add(%123, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %125 = multiply(%121, %124) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %126 = nn.conv2d(%125, meta[relay.Constant][90] /* ty=Tensor[(192, 192, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %127 = nn.batch_norm(%126, meta[relay.Constant][91] /* ty=Tensor[(192), float32] */, meta[relay.Constant][92] /* ty=Tensor[(192), float32] */, meta[relay.Constant][93] /* ty=Tensor[(192), float32] */, meta[relay.Constant][94] /* ty=Tensor[(192), float32] */) /* ty=(Tensor[(1, 192, 14, 14), float32], Tensor[(192), float32], Tensor[(192), float32]) */;
  %128 = %127.0 /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %129 = clip(%128, a_min=-3f, a_max=3f) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %130 = divide(%129, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %131 = add(%130, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %132 = multiply(%128, %131) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %133 = nn.conv2d(%132, meta[relay.Constant][95] /* ty=Tensor[(192, 1, 5, 5), float32] */, padding=[2, 2, 2, 2], groups=192, channels=192, kernel_size=[5, 5]) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %134 = nn.batch_norm(%133, meta[relay.Constant][96] /* ty=Tensor[(192), float32] */, meta[relay.Constant][97] /* ty=Tensor[(192), float32] */, meta[relay.Constant][98] /* ty=Tensor[(192), float32] */, meta[relay.Constant][99] /* ty=Tensor[(192), float32] */) /* ty=(Tensor[(1, 192, 14, 14), float32], Tensor[(192), float32], Tensor[(192), float32]) */;
  %135 = %134.0 /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %136 = clip(%135, a_min=-3f, a_max=3f) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %137 = divide(%136, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %138 = add(%137, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %139 = multiply(%135, %138) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %140 = nn.conv2d(%139, meta[relay.Constant][100] /* ty=Tensor[(192, 192, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %141 = nn.batch_norm(%140, meta[relay.Constant][101] /* ty=Tensor[(192), float32] */, meta[relay.Constant][102] /* ty=Tensor[(192), float32] */, meta[relay.Constant][103] /* ty=Tensor[(192), float32] */, meta[relay.Constant][104] /* ty=Tensor[(192), float32] */) /* ty=(Tensor[(1, 192, 14, 14), float32], Tensor[(192), float32], Tensor[(192), float32]) */;
  %142 = %141.0 /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %143 = clip(%142, a_min=-3f, a_max=3f) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %144 = divide(%143, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %145 = add(%144, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %146 = multiply(%142, %145) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %147 = nn.conv2d(%146, meta[relay.Constant][105] /* ty=Tensor[(192, 1, 5, 5), float32] */, padding=[2, 2, 2, 2], groups=192, channels=192, kernel_size=[5, 5]) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %148 = nn.batch_norm(%147, meta[relay.Constant][106] /* ty=Tensor[(192), float32] */, meta[relay.Constant][107] /* ty=Tensor[(192), float32] */, meta[relay.Constant][108] /* ty=Tensor[(192), float32] */, meta[relay.Constant][109] /* ty=Tensor[(192), float32] */) /* ty=(Tensor[(1, 192, 14, 14), float32], Tensor[(192), float32], Tensor[(192), float32]) */;
  %149 = %148.0 /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %150 = clip(%149, a_min=-3f, a_max=3f) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %151 = divide(%150, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %152 = add(%151, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %153 = multiply(%149, %152) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %154 = nn.conv2d(%153, meta[relay.Constant][110] /* ty=Tensor[(192, 192, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %155 = nn.batch_norm(%154, meta[relay.Constant][111] /* ty=Tensor[(192), float32] */, meta[relay.Constant][112] /* ty=Tensor[(192), float32] */, meta[relay.Constant][113] /* ty=Tensor[(192), float32] */, meta[relay.Constant][114] /* ty=Tensor[(192), float32] */) /* ty=(Tensor[(1, 192, 14, 14), float32], Tensor[(192), float32], Tensor[(192), float32]) */;
  %156 = %155.0 /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %157 = clip(%156, a_min=-3f, a_max=3f) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %158 = divide(%157, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %159 = add(%158, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %160 = multiply(%156, %159) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %161 = nn.conv2d(%160, meta[relay.Constant][115] /* ty=Tensor[(192, 1, 5, 5), float32] */, strides=[2, 2], padding=[2, 2, 2, 2], groups=192, channels=192, kernel_size=[5, 5]) /* ty=Tensor[(1, 192, 7, 7), float32] */;
  %162 = nn.batch_norm(%161, meta[relay.Constant][116] /* ty=Tensor[(192), float32] */, meta[relay.Constant][117] /* ty=Tensor[(192), float32] */, meta[relay.Constant][118] /* ty=Tensor[(192), float32] */, meta[relay.Constant][119] /* ty=Tensor[(192), float32] */) /* ty=(Tensor[(1, 192, 7, 7), float32], Tensor[(192), float32], Tensor[(192), float32]) */;
  %163 = %162.0 /* ty=Tensor[(1, 192, 7, 7), float32] */;
  %164 = clip(%163, a_min=-3f, a_max=3f) /* ty=Tensor[(1, 192, 7, 7), float32] */;
  %165 = divide(%164, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 7, 7), float32] */;
  %166 = add(%165, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 192, 7, 7), float32] */;
  %167 = multiply(%163, %166) /* ty=Tensor[(1, 192, 7, 7), float32] */;
  %168 = nn.adaptive_avg_pool2d(%167, output_size=[1, 1]) /* ty=Tensor[(1, 192, 1, 1), float32] */;
  %169 = nn.conv2d(%168, meta[relay.Constant][120] /* ty=Tensor[(48, 192, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=48, kernel_size=[1, 1]) /* ty=Tensor[(1, 48, 1, 1), float32] */;
  %170 = expand_dims(meta[relay.Constant][121] /* ty=Tensor[(48), float32] */, axis=1, num_newaxis=2) /* ty=Tensor[(48, 1, 1), float32] */;
  %171 = add(%169, %170) /* ty=Tensor[(1, 48, 1, 1), float32] */;
  %172 = nn.relu(%171) /* ty=Tensor[(1, 48, 1, 1), float32] */;
  %173 = nn.conv2d(%172, meta[relay.Constant][122] /* ty=Tensor[(192, 48, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 1, 1), float32] */;
  %174 = expand_dims(meta[relay.Constant][123] /* ty=Tensor[(192), float32] */, axis=1, num_newaxis=2) /* ty=Tensor[(192, 1, 1), float32] */;
  %175 = add(%173, %174) /* ty=Tensor[(1, 192, 1, 1), float32] */;
  %176 = multiply(%175, 0.166667f /* ty=float32 */) /* ty=Tensor[(1, 192, 1, 1), float32] */;
  %177 = add(%176, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 192, 1, 1), float32] */;
  %178 = clip(%177, a_min=0f, a_max=1f) /* ty=Tensor[(1, 192, 1, 1), float32] */;
  %179 = multiply(%167, %178) /* ty=Tensor[(1, 192, 7, 7), float32] */;
  %180 = nn.conv2d(%179, meta[relay.Constant][124] /* ty=Tensor[(384, 192, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 7, 7), float32] */;
  %181 = nn.batch_norm(%180, meta[relay.Constant][125] /* ty=Tensor[(384), float32] */, meta[relay.Constant][126] /* ty=Tensor[(384), float32] */, meta[relay.Constant][127] /* ty=Tensor[(384), float32] */, meta[relay.Constant][128] /* ty=Tensor[(384), float32] */) /* ty=(Tensor[(1, 384, 7, 7), float32], Tensor[(384), float32], Tensor[(384), float32]) */;
  %182 = %181.0 /* ty=Tensor[(1, 384, 7, 7), float32] */;
  %183 = clip(%182, a_min=-3f, a_max=3f) /* ty=Tensor[(1, 384, 7, 7), float32] */;
  %184 = divide(%183, 6f /* ty=float32 */) /* ty=Tensor[(1, 384, 7, 7), float32] */;
  %185 = add(%184, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 384, 7, 7), float32] */;
  %186 = multiply(%182, %185) /* ty=Tensor[(1, 384, 7, 7), float32] */;
  %187 = nn.conv2d(%186, meta[relay.Constant][129] /* ty=Tensor[(384, 1, 5, 5), float32] */, padding=[2, 2, 2, 2], groups=384, channels=384, kernel_size=[5, 5]) /* ty=Tensor[(1, 384, 7, 7), float32] */;
  %188 = nn.batch_norm(%187, meta[relay.Constant][130] /* ty=Tensor[(384), float32] */, meta[relay.Constant][131] /* ty=Tensor[(384), float32] */, meta[relay.Constant][132] /* ty=Tensor[(384), float32] */, meta[relay.Constant][133] /* ty=Tensor[(384), float32] */) /* ty=(Tensor[(1, 384, 7, 7), float32], Tensor[(384), float32], Tensor[(384), float32]) */;
  %189 = %188.0 /* ty=Tensor[(1, 384, 7, 7), float32] */;
  %190 = clip(%189, a_min=-3f, a_max=3f) /* ty=Tensor[(1, 384, 7, 7), float32] */;
  %191 = divide(%190, 6f /* ty=float32 */) /* ty=Tensor[(1, 384, 7, 7), float32] */;
  %192 = add(%191, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 384, 7, 7), float32] */;
  %193 = multiply(%189, %192) /* ty=Tensor[(1, 384, 7, 7), float32] */;
  %194 = nn.adaptive_avg_pool2d(%193, output_size=[1, 1]) /* ty=Tensor[(1, 384, 1, 1), float32] */;
  %195 = nn.conv2d(%194, meta[relay.Constant][134] /* ty=Tensor[(96, 384, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %196 = expand_dims(meta[relay.Constant][135] /* ty=Tensor[(96), float32] */, axis=1, num_newaxis=2) /* ty=Tensor[(96, 1, 1), float32] */;
  %197 = add(%195, %196) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %198 = nn.relu(%197) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %199 = nn.conv2d(%198, meta[relay.Constant][136] /* ty=Tensor[(384, 96, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 1, 1), float32] */;
  %200 = expand_dims(meta[relay.Constant][137] /* ty=Tensor[(384), float32] */, axis=1, num_newaxis=2) /* ty=Tensor[(384, 1, 1), float32] */;
  %201 = add(%199, %200) /* ty=Tensor[(1, 384, 1, 1), float32] */;
  %202 = multiply(%201, 0.166667f /* ty=float32 */) /* ty=Tensor[(1, 384, 1, 1), float32] */;
  %203 = add(%202, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 384, 1, 1), float32] */;
  %204 = clip(%203, a_min=0f, a_max=1f) /* ty=Tensor[(1, 384, 1, 1), float32] */;
  %205 = multiply(%193, %204) /* ty=Tensor[(1, 384, 7, 7), float32] */;
  %206 = nn.conv2d(%205, meta[relay.Constant][138] /* ty=Tensor[(384, 384, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 7, 7), float32] */;
  %207 = nn.batch_norm(%206, meta[relay.Constant][139] /* ty=Tensor[(384), float32] */, meta[relay.Constant][140] /* ty=Tensor[(384), float32] */, meta[relay.Constant][141] /* ty=Tensor[(384), float32] */, meta[relay.Constant][142] /* ty=Tensor[(384), float32] */) /* ty=(Tensor[(1, 384, 7, 7), float32], Tensor[(384), float32], Tensor[(384), float32]) */;
  %208 = %207.0 /* ty=Tensor[(1, 384, 7, 7), float32] */;
  %209 = clip(%208, a_min=-3f, a_max=3f) /* ty=Tensor[(1, 384, 7, 7), float32] */;
  %210 = divide(%209, 6f /* ty=float32 */) /* ty=Tensor[(1, 384, 7, 7), float32] */;
  %211 = add(%210, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 384, 7, 7), float32] */;
  %212 = multiply(%208, %211) /* ty=Tensor[(1, 384, 7, 7), float32] */;
  %213 = nn.adaptive_avg_pool2d(%212, output_size=[1, 1]) /* ty=Tensor[(1, 384, 1, 1), float32] */;
  %214 = nn.conv2d(%213, meta[relay.Constant][143] /* ty=Tensor[(1280, 384, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=1280, kernel_size=[1, 1]) /* ty=Tensor[(1, 1280, 1, 1), float32] */;
  %215 = clip(%214, a_min=-3f, a_max=3f) /* ty=Tensor[(1, 1280, 1, 1), float32] */;
  %216 = divide(%215, 6f /* ty=float32 */) /* ty=Tensor[(1, 1280, 1, 1), float32] */;
  %217 = add(%216, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 1280, 1, 1), float32] */;
  %218 = multiply(%214, %217) /* ty=Tensor[(1, 1280, 1, 1), float32] */;
  %219 = nn.dropout(%218, rate=0.2f) /* ty=(Tensor[(1, 1280, 1, 1), float32], Tensor[(1, 1280, 1, 1), float32]) */;
  %220 = %219.0 /* ty=Tensor[(1, 1280, 1, 1), float32] */;
  %221 = multiply(%220, 0.8f /* ty=float32 */) /* ty=Tensor[(1, 1280, 1, 1), float32] */;
  %222 = reshape(%221, newshape=[0, -1, 1, 1]) /* ty=Tensor[(1, 1280, 1, 1), float32] */;
  %223 = squeeze(%222, axis=[2, 3]) /* ty=Tensor[(1, 1280), float32] */;
  %224 = transpose(meta[relay.Constant][144] /* ty=Tensor[(1280, 1000), float32] */, axes=[1, 0]) /* ty=Tensor[(1000, 1280), float32] */;
  %225 = nn.dense(%223, %224, units=None) /* ty=Tensor[(1, 1000), float32] */;
  %226 = add(%225, meta[relay.Constant][145] /* ty=Tensor[(1000), float32] */) /* ty=Tensor[(1, 1000), float32] */;
  %227 = max(%226, axis=[1], keepdims=True) /* ty=Tensor[(1, 1), float32] */;
  %228 = subtract(%226, %227) /* ty=Tensor[(1, 1000), float32] */;
  %229 = exp(%228) /* ty=Tensor[(1, 1000), float32] */;
  %230 = sum(%229, axis=[1], keepdims=True) /* ty=Tensor[(1, 1), float32] */;
  divide(%229, %230) /* ty=Tensor[(1, 1000), float32] */
}

